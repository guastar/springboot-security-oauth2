# 激活哪一个环境的配置文件
spring.profiles.active=prod

# 驱动配置信息
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driverClassName=com.mysql.jdbc.Driver

# 连接池的配置信息
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.logSlowSql=true
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true
# 忽略资源
spring.datasource.exclusions=*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*

# JPA Configuration
# 指定数据库类型
spring.jpa.database=mysql
# 控制台打印sql
spring.jpa.show-sql=true
# 建表策略，update，即根据实体更新表结构
# 配置指定对数据库表结构的处理方式，值有：create、create-drop、update、validate
#
# create：每次加载hibernate的时候，都会重新根据模型生成表。如果表已存在，会先删除该表再生成。
# create-drop：启动项目加载hibernate的时候，会生成表。停止项目时，会把生成的表删除掉。
# update：常用属性。每次加载hibernate的时候，会生成表。如果表存在，会根据模型的属性变化来更新表结构，这个过程不会做删表处理。
# validate：每次加载hibernate的时候，会检查表结构，但不会生成表。
spring.jpa.hibernate.ddl-auto=update
# 表中字段命名策略,这里要引入hibernate的核心包，不然这个命名策略会报错
#spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy
# 方言
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect


# Redis config
## Redis数据库索引（默认为0）
spring.redis.database=0
## Redis服务器地址
spring.redis.host=127.0.0.1
## Redis服务器连接端口
spring.redis.port=6379
## Redis服务器连接密码（默认为空）
spring.redis.password=
## 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
## 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=1
## 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
## 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
## 连接超时时间（毫秒）
spring.redis.timeout=0

# tomcat 的URI编码
server.tomcat.uri-encoding=UTF-8

# Freemarker config
# 设置 ftl 文件路径
spring.freemarker.template-loader-path=classpath:/templates/freemarker/
# 关闭缓存，即时刷新，生产环境需改为true
spring.freemarker.cache=false
spring.freemarker.charset=UTF-8
spring.freemarker.check-template-location=true
spring.freemarker.content-type=text/html
spring.freemarker.expose-request-attributes=true
spring.freemarker.expose-session-attributes=true
spring.freemarker.request-context-attribute=request
spring.freemarker.suffix=.ftl

# thymeleaf config
spring.thymeleaf.prefix=classpath:templates/thymeleaf/
spring.thymeleaf.surfix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.context-type=text/html
# 关闭缓存，即时刷新，生产环境需改为true
spring.thymeleaf.cache=false

# 设置静态文件路径，js、css等
spring.mvc.static-path-pattern=/static/**

# Mybatis config
#mybatis.config-locations=classpath:mybatis/mybatis-config.xml
#mybatis.mapper-locations=classpath*:mapper/*.xml
mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.type-aliases-package=com.lxg.springboot.model

mapper.mappers=com.lxg.springboot.utils.MyMapper
mapper.not-empty=false
mapper.identity=MYSQL

### Logging ###
# Log levels (TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF)
logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.org.springframework.web=INFO
logging.level.org.mybatis=INFO
logging.level.com.shawn=DEBUG

# File output
project.name=springboot-security-oauth2
logging.file=/${project.name}/logs/SpringBoot-Mybatis.log